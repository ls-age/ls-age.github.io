{"nameWithOwner":"ls-age/devtools","url":"https://github.com/ls-age/devtools","description":"A collection of devtools","pushedAt":"2020-12-22T07:52:10Z","stargazers":{"totalCount":0},"releases":{"nodes":[{"tagName":"rollup-plugin-unused-v0.1.0"}]},"readme":{"title":"ls-age devtools","slug":"ls-age-devtools","sections":[{"title":"Packages","slug":"packages","children":[{"title":"@ls-age/commitlint-config","slug":"ls-agecommitlint-config"},{"title":"rollup-plugin-unused","slug":"rollup-plugin-unused"},{"title":"@ls-age/update-section","slug":"ls-ageupdate-section"}]},{"title":"Usage","slug":"usage"}],"content":"<h1 id=\"ls-age-devtools\">ls-age devtools</h1><blockquote>\n<p>A collection of devtools</p>\n</blockquote>\n<p><a href=\"https://circleci.com/gh/ls-age/devtools\"><img src=\"https://circleci.com/gh/ls-age/devtools.svg?style=svg\" alt=\"CircleCI\"></a></p>\n<!-- BEGIN packages -->\n<!-- This section is generated, do not edit it! -->\n\n<h2 id=\"packages\">Packages</h2><h3 id=\"ls-agecommitlint-config\"><a href=\"packages/commitlint-config\">@ls-age/commitlint-config</a></h3><blockquote>\n<p>Like @commitlint/config-conventional, but with a sentence-cased subject</p>\n</blockquote>\n<p>Following commit message guidelines makes it easier to follow semantic versioning, both if you manually publish releases or use a tool like <a href=\"https://github.com/ls-age/bump-version\"><em>@ls-age/bump-version</em></a> to automate this. The commit message contains a <em>type</em>, a <em>subject</em> and (optionally) a <em>scope</em>:</p>\n<pre><code>fix(package): This is what happened\n\n              ^ subject\n    ^ scope\n^ type</code></pre><ul>\n<li>The <strong>type</strong> describes what kind of change was made. It should be one of the following: <code>&#39;build&#39;</code>, <code>&#39;ci&#39;</code>, <code>&#39;chore&#39;</code>, <code>&#39;docs&#39;</code>, <code>&#39;feat&#39;</code>, <code>&#39;fix&#39;</code>, <code>&#39;perf&#39;</code>, <code>&#39;refactor&#39;</code>, <code>&#39;revert&#39;</code>, <code>&#39;style&#39;</code>, <code>&#39;test&#39;</code>.</li>\n<li>The <strong>scope</strong> can <em>optionally</em> be set to the name of the sub-package or service that is affected by this commit.</li>\n<li>The <strong>subject</strong> contains a human-readable description of the changes made. It should start with an uppercase letter.</li>\n</ul>\n<h3 id=\"rollup-plugin-unused\"><a href=\"packages/rollup-plugin-unused\">rollup-plugin-unused</a></h3><blockquote>\n<p>Rollup plugin to check for unused files</p>\n</blockquote>\n<p><img src=\"./packages/rollup-plugin-unused/docs/assets/usage.svg\" alt=\"Usage\"></p>\n<p>This plugin helps you to keep your repository clean: It checks for source files that are not imported during a rollup build and reports them.</p>\n<h3 id=\"ls-ageupdate-section\"><a href=\"packages/update-section\">@ls-age/update-section</a></h3><blockquote>\n<p>Update a section of a file</p>\n</blockquote>\n<h2 id=\"usage\">Usage</h2><p><code>@ls-age/update-section</code> provides an easy way to update files that are party generated.</p>\n<p><strong>Example:</strong></p>\n<!-- BEGIN readme-before -->\n<!-- This section is generated, do not edit it! -->\n\n<pre><code class=\"language-md\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- README.md --&gt;</span></span>\n\n<span class=\"hljs-section\"># My monorepo</span>\n\n<span class=\"hljs-section\">## Packages</span>\n\n<span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- BEGIN packages --&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- END packages --&gt;</span></span></code></pre>\n<!-- END readme-before -->\n\n<!-- BEGIN sample-source -->\n<!-- This section is generated, do not edit it! -->\n\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">/* scripts/update-readme.js */</span>\n\n<span class=\"hljs-keyword\">const</span> Template = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@ls-age/update-section'</span>);\n\n<span class=\"hljs-comment\">// Update the packages list</span>\n<span class=\"hljs-keyword\">const</span> packages = [\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'First'</span>, <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'My first package'</span> },\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Second'</span>, <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'Another package'</span> },\n];\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateReadme</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// Generate a list of packages</span>\n  <span class=\"hljs-keyword\">const</span> packageList = packages.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =&gt;</span> <span class=\"hljs-string\">`- **<span class=\"hljs-subst\">${p.name}</span>** - <span class=\"hljs-subst\">${p.description}</span>`</span>).join(<span class=\"hljs-string\">'\\n'</span>);\n\n  <span class=\"hljs-comment\">// ...and write it to the readme file</span>\n  <span class=\"hljs-keyword\">await</span> Template.updateSection(<span class=\"hljs-string\">'./README.md'</span>, <span class=\"hljs-string\">'packages'</span>, packageList);\n}\n\nupdateReadme().catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.error(error);\n  process.exitCode = <span class=\"hljs-number\">1</span>;\n});</code></pre>\n<!-- END sample-source -->\n\n<p>Running <code>node scripts/update-readme.js</code> results in:</p>\n<!-- BEGIN sample-result -->\n<!-- This section is generated, do not edit it! -->\n\n<pre><code class=\"language-md\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- README.md --&gt;</span></span>\n\n<span class=\"hljs-section\"># My monorepo</span>\n\n<span class=\"hljs-section\">## Packages</span>\n\n<span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- BEGIN packages --&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- This section is generated, do not edit it! --&gt;</span></span>\n\n<span class=\"hljs-bullet\">- </span><span class=\"hljs-strong\">**First**</span> - My first package\n<span class=\"hljs-bullet\">- </span><span class=\"hljs-strong\">**Second**</span> - Another package\n\n<span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- END packages --&gt;</span></span></code></pre>\n<!-- END sample-result -->\n\n<!-- END packages -->\n"}}